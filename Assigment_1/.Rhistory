# import image and convert to matrix
my_url <- "https://raw.githubusercontent.com/AmandaSFox/DATA605_Math/main/OC1Y7T0.jpg"
my_image <- readJPEG(getURLContent(my_url, binary = TRUE))
my_url <- "https://raw.githubusercontent.com/AmandaSFox/DATA605_Math/main/OC1Y7T0.jpg"
my_image <- readJPEG(getURLContent(my_url, binary = TRUE))
# load libraries
library(tidyverse)
library(ggplot2)
library(patchwork)
library(jpeg)
library(RCurl)
my_image <- readJPEG(getURLContent(my_url, binary = TRUE))
process_python <- FALSE # Set this to FALSE to prevent Python initialization
reticulate::repl_python()
reticulate::repl_python()
B <- matrix(c(2,5,7,
4,10,14,
1,2.5,3.5), byrow = TRUE, nrow = 3)
B
B <- matrix(c(-2,1,1,
-4,0,2,
3,0,0), byrow = TRUE, nrow = 3)
B
det_B <- det(B)
det_B
# load libraries
library(tidyverse)
library(ggplot2)
library(patchwork)
library(jpeg)
library(RCurl)
# create matrix defining triangle:
my_shape <- matrix(c(0,0,
1,0,
0,1,
0,0),
nrow = 2, byrow = TRUE)
my_shape
# prepare to plot: convert to df and label columns x & y
df_my_shape <- as.data.frame(t(my_shape))
colnames(df_my_shape) <- c("x","y")
df_my_shape
# plot
plot_my_shape <- df_my_shape %>%
ggplot(aes(x = x, y = y)) +
geom_path(color = 'blue', linewidth = 1.2) +
geom_hline(yintercept = 0, color = "gray30") +
geom_vline(xintercept = 0, color = "gray30") +
coord_fixed(xlim = c(-2,2), ylim = c(-2,2)) +
theme_minimal()
plot_my_shape + plot_annotation("Original Triangle")
# load libraries
library(tidyverse)
library(ggplot2)
library(patchwork)
library(jpeg)
library(RCurl)
# create matrix defining triangle:
my_shape <- matrix(c(0,0,
1,0,
0,1,
0,0),
nrow = 2, byrow = TRUE)
my_shape
# prepare to plot: convert to df and label columns x & y
df_my_shape <- as.data.frame(t(my_shape))
colnames(df_my_shape) <- c("x","y")
df_my_shape
# plot
plot_my_shape <- df_my_shape %>%
ggplot(aes(x = x, y = y)) +
geom_path(color = 'blue', linewidth = 1.2) +
geom_hline(yintercept = 0, color = "gray30") +
geom_vline(xintercept = 0, color = "gray30") +
coord_fixed(xlim = c(-2,2), ylim = c(-2,2)) +
theme_minimal()
plot_my_shape + plot_annotation("Original Triangle")
# create scaling transformation matrix multiplying x and y by 2
matrix_scale <- matrix(c(2,0,
0,2),
nrow = 2, byrow = TRUE)
matrix_scale
# multiply: transpose my_shape matrix so # rows match # columns
my_shape_scaled <- t(my_shape) %*% matrix_scale
my_shape_scaled
# convert to df with column names x,y
df_my_shape_scaled <- as.data.frame(my_shape_scaled)
colnames(df_my_shape_scaled) <- c("x","y")
df_my_shape_scaled
# plot
plot_my_shape_scaled <- df_my_shape_scaled %>%
ggplot(aes(x = x, y = y)) +
geom_path(color = 'blue', linewidth = 1.2) +
geom_hline(yintercept = 0, color = "gray30") +
geom_vline(xintercept = 0, color = "gray30") +
coord_fixed(xlim = c(-2,2), ylim = c(-2,2)) +
theme_minimal()
plot_my_shape + plot_my_shape_scaled  + plot_annotation("Original and Scaled Triangle")
# create transformation matrix (x, y) → (x, -y)
matrix_flip <- matrix(c(1, 0,
0,-1),
nrow = 2, byrow = TRUE)
matrix_flip
# multiply: transpose my_shape matrix so # rows match # columns
my_shape_flip <- t(my_shape) %*% matrix_flip
my_shape_flip
# convert to df with column names x,y
df_my_shape_flip <- as.data.frame(my_shape_flip)
colnames(df_my_shape_flip) <- c("x","y")
df_my_shape_flip
# plot
plot_my_shape_flip <- df_my_shape_flip %>%
ggplot(aes(x = x, y = y)) +
geom_path(color = 'blue', linewidth = 1.2) +
geom_hline(yintercept = 0, color = "gray30") +
geom_vline(xintercept = 0, color = "gray30") +
coord_fixed(xlim = c(-2,2), ylim = c(-2,2)) +
theme_minimal()
plot_my_shape + plot_my_shape_flip + plot_annotation("Original and Flipped Triangle")
# create transformation matrix (x, y) → (-y, x)
matrix_rotate_90 <- matrix(c(0,-1,
1, 0),
nrow = 2, byrow = TRUE)
matrix_rotate_90
# create list to hold plots for display
rotated_shapes <- list()
rotated_shapes[[1]] <- plot_my_shape
current_shape <- t(my_shape)
current_shape
# loop: multiply, convert to df, create and store plot
for (i in 2:5) {
# multiply matrix
current_shape <- current_shape %*% matrix_rotate_90
current_shape
# convert transformed matrix to df with column names x,y
df_rotate_90 <- as.data.frame(current_shape)
colnames(df_rotate_90) <- c("x","y")
df_rotate_90
# create and store plot
rotated_shapes[[i]] <- df_rotate_90 %>%
ggplot(aes(x = x, y = y)) +
geom_path(color = 'blue', linewidth = 1.2) +
geom_hline(yintercept = 0, color = "gray30") +
geom_vline(xintercept = 0, color = "gray30") +
coord_fixed(xlim = c(-2,2), ylim = c(-2,2)) +
theme_minimal()
}
plot_display <- rotated_shapes[[1]] +
rotated_shapes[[2]] +
rotated_shapes[[3]] +
rotated_shapes[[4]] +
rotated_shapes[[5]]
plot_display +
plot_layout(ncol = 5) +
plot_annotation("Original and Rotated Triangles")
# --------------
# AB <> BA
# --------------
# define two 3x3 matrices A and B
A <- matrix(c(1,2,3,
4,5,6,
7,8,9),
nrow = 3, byrow = TRUE)
B <- matrix(c(1, 0,-1,
1, 2, 0,
0,-1, 1),
nrow = 3, byrow = TRUE)
A%*%B
B%*%A
# Matrix A from above:
A
# Transpose of A:
t(A)
# Transpose of A times A:
t(A) %*% A
# determinant of transpose of A times A:
det(t(A) %*% A)
# import image and convert to matrix
my_url <- "https://raw.githubusercontent.com/AmandaSFox/DATA605_Math/main/OC1Y7T0.jpg"
my_image <- readJPEG(getURLContent(my_url, binary = TRUE))
# check if three channels (RGB) and if so, extract one channel to make it grayscale
if(length(dim(my_image)) == 3) {
my_image <- my_image[, , 1]
}
# validate image size and not three dimensions
dim(my_image)
# apply SVD and display components
my_svd <- svd(my_image)
# Extract components
U <- my_svd$u
S <- diag(my_svd$d)
V <- my_svd$v
# Reconstruct image FUNCTION
reconstruct_image <- function(k) {
U_k <- U[, 1:k]  # First k columns of U
S_k <- S[1:k, 1:k]  # Top k singular values
V_k <- V[, 1:k]  # First k columns of V
img_k <- U_k %*% S_k %*% t(V_k)
return(img_k)
}
# Substitute different k values and create three new matrices:
img_k5 <- reconstruct_image(5)
img_k40 <- reconstruct_image(30)
img_k80 <- reconstruct_image(80)
# create function to correct rotation:
rotate_90 <- function(image_matrix) {
rotated_matrix <- t(image_matrix)[, ncol(image_matrix):1]
return(rotated_matrix)
}
# setting to display all images in one row
#par(mfrow = c(1,4))
# create four images, applying above rotation function, gray instead of red
my_image_k5 <- image(rotate_90(img_k5), col = gray.colors(256), main="k = 5")
my_image_k40 <- image(rotate_90(img_k40), col = gray.colors(256), main="k = 40")
my_image_k80 <- image(rotate_90(img_k80), col = gray.colors(256), main="k = 80")
my_image_orig <- image(rotate_90(my_image), col = gray.colors(256), main="Original")
detach("package:ggplot2", unload = TRUE)
library(ggplot2)
