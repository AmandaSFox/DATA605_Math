case3_books_strat_leq4
# combinations with six business books
case4_biz_6 <- choose(total_books-biz, 7) # if six are strategy, ways to choose 7 from other categories
case4_biz_6
total_arrangements <- factorial(10)
total_arrangements
# calculate arrangements of two blocks of five, in any order:
elec_arrangements <- factorial(5)
acc_arrangements <- factorial(5)
# calculate arrangements of two blocks of five, in any order:
elec_arrangements <- factorial(5)
acc_arrangements <- factorial(5)
# calculate total possible ways to arrange these two blocks of five items
block_arrangements <- factorial(2)
# calculate total desired arrangements of two blocks of five items by type
desired_arrangements <- elec_arrangements * acc_arrangements * block_arrangements
# calculate % desired arrangements as % of total possible
prob_desired_arrangement <- desired_arrangements/total_arrangements
prob_desired_arrangement
cards_lose <- 52 - cards_win
win <- 4
lose <- -16
cards_win <- 2*4 #kings and aces times four suits
cards_lose <- 52 - cards_win
cards_lose <- 2*4 #kings and aces times four suits
cards_win <- 52 - cards_win
prob_win <- cards_win/52
prob_lose <- cards_lose/52
expected_value <- (4 * prob_win) + (-16 * prob_lose)
expected_value
# expected value of a hand
expected_value <- (value_win * prob_win) + (value_lose * prob_lose)
expected_value
value_win <- 4
value_lose <- -16
cards_lose <- 2*4 #kings and aces times four suits
cards_win <- 52 - cards_win
# probabilities of win/lose
prob_win <- cards_win/52
prob_lose <- cards_lose/52
# expected value of a hand
expected_value <- (value_win * prob_win) + (value_lose * prob_lose)
expected_value
# probabilities of win/lose
prob_win <- cards_win/52
prob_lose <- cards_lose/52
# expected value of a hand
expected_value <- (value_win * prob_win) + (value_lose * prob_lose)
expected_value
cards_lose <- 2*4 #kings and aces times four suits
cards_win <- 52 - cards_win
# probabilities of win/lose
prob_win <- cards_win/52
prob_lose <- cards_lose/52
# expected value of a hand
expected_value <- (value_win * prob_win) + (value_lose * prob_lose)
expected_value
value_win <- 4
value_lose <- -16
cards_lose <- 2*4 #kings and aces times four suits
cards_win <- 52 - cards_win
# probabilities of win/lose
prob_win <- cards_win/52
prob_lose <- cards_lose/52
# expected value of a hand
expected_value <- (value_win * prob_win) + (value_lose * prob_lose)
expected_value
cards_lose <- 2*4 #kings and aces times four suits
cards_win <- 52 - cards_win
# probabilities of win/lose
prob_win <- cards_win/52
prob_win
prob_lose <- cards_lose/52
# expected value of a hand
expected_value <- (value_win * prob_win) + (value_lose * prob_lose)
expected_value
value_win <- 4
value_lose <- -16
cards_lose <- 2*4 #kings and aces times four suits
cards_win <- 52 - cards_win
# probabilities of win/lose
prob_win <- cards_win/52
prob_lose <- cards_lose/52
# expected value of a hand
expected_value <- (value_win * prob_win) + (value_lose * prob_lose)
expected_value
value_win <- 4
value_lose <- -16
cards_lose <- 2*4 #kings and aces times four suits
cards_win <- 52 - cards_lose
# probabilities of win/lose
prob_win <- cards_win/52
prob_lose <- cards_lose/52
# expected value of a hand
expected_value <- (value_win * prob_win) + (value_lose * prob_lose)
expected_value
# expected value of 833 hands
833*expected_value
n_suppliers <- 5
k_days <- 20
k_days <- 1:20
n_suppliers <- 5
k_days <- 1:20
# calculate distribution function for Y <= k_days
P_Y_leq_k <- 1-((20 - k_days)/19)^5
library(ggplot2)
df_P_Y_leq_k <- data.frame(day = k, probability = P_Y_leq_k)
df_P_Y_leq_k <- data.frame(day = k_days, probability = P_Y_leq_k)
head(df_P_Y_leq_k)
# plot
plot_cdf <- df_P_Y_leq_k %>%
ggplot(aes = (x = day,
# plot
plot_cdf <- df_P_Y_leq_k %>%
ggplot(aes(x = day,
y = probability))+
geom_line()
# plot
library(tidyverse)
# plot
plot_cdf <- df_P_Y_leq_k %>%
ggplot(aes(x = day,
y = probability))+
geom_line()
plot_cdf
df_P_Y_leq_k <- data.frame(earliest_day = k_days,
probability = P_Y_leq_k)
head(df_P_Y_leq_k)
# plot
plot_cdf <- df_P_Y_leq_k %>%
ggplot(aes(x = earliest_day,
y = probability))+
geom_line()
plot_cdf
# Geometric - assumes independence
prob_geom_machine <- 1/8
prob_failure_6 <- prob_geom_machine^6
prob_no_fail_6 <- 1 - prob_geom_machine
prob_no_fail_6
prob_failure <- 1/8
# No failure in six years
prob_geom_failure_6 <- prob_failure^6
prob_geom_no_fail_6 <- 1 - prob_geom_failure_6
prob_geom_no_fail_6
prob_failure <- 1/8
# No failure in six years
prob_geom_failure_6 <- prob_failure^6
prob_geom_no_fail_6 <- 1 - prob_geom_failure_6
prob_geom_no_fail_6
# No failure in six years
prob_geom_no_fail_6 <- (1 - prob_failure)^6
prob_geom_no_fail_6
prob_failure <- 1/8
# No failure in six years
prob_geom_no_fail_6 <- (1 - prob_failure)^6
prob_geom_no_fail_6
prob_failure <- 1/8
# No failure in six years
prob_geom_no_fail_6 <- (1 - prob_failure)^6
prob_geom_no_fail_6
prob_failure
# No failure in six years
prob_geom_no_fail_6 <- (1-prob_failure)^6
prob_geom_no_fail_6
# No failure in six years
prob_geom_no_fail_6 <- (1- 1/8)^6
prob_geom_no_fail_6
# No failure in six years
prob_geom_no_fail_6 <- (7/8)^6
prob_geom_no_fail_6
# No failure in six years
prob_geom_no_fail_6 <- (7/8)^6
prob_geom_no_fail_6
# No failure in six years
options(digits = 10)
prob_geom_no_fail_6 <- (7/8)^6
prob_geom_no_fail_6
# No failure in six years
rm(list = ls())           # clear everything from memory
options(digits = 10)      # show more precision
prob_geom_no_fail_6 <- (7/8)^6
print(prob_geom_no_fail_6)
# No failure in six years
rm(list = ls())           # clear everything from memory
options(digits = 10)      # show more precision
(7/8)^6
prob_failure <- 1/8
prob_failure
# No failure in six years
prob_no_fail_6 <- (1-prob_failure)^6
prob_no_fail_6
lambda_exp_machine <- prob_failure
lambda_exp_machine <- prob_failure
prob_no_fail_exp_6 <- 1 - pexp(6,
rate = lambda_exp_machine)
prob_no_fail_exp_6
expected_exp_machine <- 1/lambda_exp_machine
expected_exp_machine
expected_geom_machine <- 1/prob_failure
expected_geom_machine
std_dev_geom_machine <- sqrt((1-prob_failure)/prob_failure^2)
std_dev_geom_machine <- sqrt((1-prob_failure)/prob_failure^2)
std_dev_geom_machine
trials_binom <- 6
prob_binom_no_fail_6
prob_binom_no_fail_6 <- dbinom(0,
trials_binom,
prob_failure)
prob_binom_no_fail_6
expected_exp_machine <- trials_binom %*% prob_binom_no_fail_6
expected_binom_machine <- trials_binom %*% prob_binom_no_fail_6
expected_binom_machine
std_dev_binom_machine <- sqrt(trials_binom %*% prob_failure %*% (1-prob_failure))
std_dev_binm_machine
std_dev_binom_machine
expected_binom_machine <- trials_binom %*% prob_failure
expected_binom_machine
prob_binom_no_fail_6 <- dbinom(0,
trials_binom,
prob_failure)
prob_binom_no_fail_6
std_dev_binom_machine <- sqrt(trials_binom %*% prob_failure %*% (1-prob_failure))
std_dev_binom_machine
lambda_pois_machine <- prob_failure
lambda_pois_machine_total <- lambda_pois_machine * 6
expected_pois_machine <- lambda_pois_machine * 6
prob_pois_no_fail_6 <- dpois(0,expected_pois_machine)
prob_pois_no_fail_6
std_dev_pois_machine <- sqrt(expected_pois_machine)
std_dev_pois_machine
prob_pois_no_fail_6
expected_pois_machine <- lambda_pois_machine * 6
expected_pois_machine
prob_pois_no_fail_6 <- dpois(0,expected_pois_machine)
prob_pois_no_fail_6
std_dev_pois_machine
std_dev_pois_machine <- sqrt(expected_pois_machine)
std_dev_pois_machine
library(tidyverse)
library(ggplot2)
df_raw <- read_csv(gapminder_data_graphs.csv)
getwd()
setwd("c:/Users/amand/Git_Projects/DATA605_Math")
getwd()
df_raw <- read_csv(gapminder_data_graphs.csv)
df_raw <- read_csv("gapminder_data_graphs.csv")
df_raw <- read_csv("gapminder_data_graphs.csv")
glimpse(df_raw)
# find unique values
df_raw %>%
count(year, sort = TRUE)
print(n=25)
# find unique values
df_raw %>%
summarise(across(everything(), n_distinct))
unique_values
# find unique values
unique_values <- df_raw %>%
summarise(across(everything(), n_distinct))
unique_values
# find unique values
library(purrr)
df_raw %>%
select(where(is.character)) %>%
map(unique)
df_raw %>%
#  select(where(is.character)) %>%
map(unique)
install.packages("summarytools")
library(summarytools)
# load data
df_raw <- read_csv("gapminder_data_graphs.csv")
dfSummary(df_raw)
# find unique years sorted
df_raw %>%
count(year, sort= true) %>%
print()
# find unique years sorted
df_raw %>%
count(year, sort=TRUE) %>%
print()
# find unique years sorted
df_raw %>%
count(year, sort=TRUE) %>%
print(n=25)
# missing data
colSums(is.na(df_raw))
# duplicate records
nrow(df_low_access) - nrow(distinct(df_low_access))
# duplicate records
nrow(df_raw) - nrow(distinct(df_raw))
# missing data
df_raw %>%
filter(year=2018) %>%
colSums(is.na(df_raw))
# missing data
df_raw %>%
filter(year==2018) %>%
colSums(is.na(df_raw))
df_raw %>%
filter(year == 2018) %>%
summarise(across(everything(), ~sum(is.na(.))))
# duplicate records
nrow(df_raw) - nrow(distinct(df_raw))
df_clean <- df_raw %>%
filter(year == 2018) %>%
filter(!is.na(gdp)) %>% #remove blank
glimpse(df_clean)
df_clean <- df_raw %>%
filter(year == 2018) %>%
filter(!is.na(gdp)) #remove blank
glimpse(df_clean)
lm_gdp <- df_clean
lm_gdp <- df_clean %>%
lm(Life_expectancy ~ GDP_per_capita, data = data)
is.data.frame(df_clean)
lm_gdp <- df_clean %>%
lm(Life_expectancy ~ GDP_per_capita)
lm_gdp <- lm(Life_expectancy ~ GDP_per_capita,
data = df_clean)
lm_gdp <- lm(life_exp ~ gdp,
data = df_clean)
summary(lm_gdp)
coef <- summary(lm_gdp)$coefficients
intercept <- round(coef[1, 1], 2)  # 69.48
gdp_coef <- round(coef[2, 1], 6)   # 0.000249
intercept
gdp_coef
resid_df <- df_clean %>%
mutate(
.fitted = fitted(lm_gdp),
.resid = resid(lm_gdp),
.std_resid = rstandard(lm_gdp)
)
plot_residuals <- resid_df %>%
ggplot(aes(x = .fitted,
y = .resid)) +
geom_point(alpha = 0.6) +
geom_hline(yintercept = 0,
color = "red",
linetype = "dashed") +
labs(
title = "Residuals vs. Fitted Values",
x = "Fitted Values",
y = "Residuals"
) +
theme_minimal()
plot_residuals
glimpse(df_clean)
# plot data
plot_raw <- df_clean %>%
ggplot(aes(x = gdp,
y = life_exp)) +
geom_point(alpha = 0.6,
color = "steelblue") +
labs(
title = "Scatterplot: Life Expectancy and GDP",
x = "GDP Per Capita",
y = "Life Expectancy"
) +
theme_minimal()
plot_raw
# plot data and add a geom_smooth lm line
plot_raw <- df_clean %>%
ggplot(aes(x = gdp,
y = life_exp)) +
geom_point(alpha = 0.6,
color = "steelblue") +
geom_smooth(method = "lm", se = TRUE, color = "darkred") +
labs(
title = "Scatterplot: Life Expectancy and GDP",
x = "GDP Per Capita",
y = "Life Expectancy"
) +
theme_minimal()
plot_raw
# plot data and add a geom_smooth lm line
plot_raw <- df_clean %>%
ggplot(aes(x = gdp,
y = life_exp)) +
geom_point(alpha = 0.6,
color = "steelblue") +
#  geom_smooth(method = "lm", se = TRUE, color = "darkred") +
labs(
title = "Scatterplot: Life Expectancy and GDP",
x = "GDP Per Capita",
y = "Life Expectancy"
) +
theme_minimal()
plot_raw
plot_model <- df_clean %>%
ggplot(aes(x = gdp,
y = life_exp)) +
geom_point(alpha = 0.6,
color = "steelblue") +
geom_line(aes(y = fitted_life_exp), color = "darkred", size = 1)  +
labs(
title = "Scatterplot: Life Expectancy and GDP",
x = "GDP Per Capita",
y = "Life Expectancy"
) +
theme_minimal()
plot_model
plot_model <- df_clean %>%
ggplot(aes(x = gdp,
y = life_exp)) +
geom_point(alpha = 0.6,
color = "steelblue") +
geom_line(aes(y = fitted_life_exp),
color = "darkred")  +
labs(
title = "Scatterplot: Life Expectancy and GDP",
x = "GDP Per Capita",
y = "Life Expectancy"
) +
theme_minimal()
plot_model
# Add predicted values to df_clean and re-plot:
df_clean <- df_clean %>%
mutate(fitted_life_exp = predict(lm_gdp))
plot_model <- df_clean %>%
ggplot(aes(x = gdp,
y = life_exp)) +
geom_point(alpha = 0.6,
color = "steelblue") +
geom_line(aes(y = fitted_life_exp),
color = "darkred")  +
labs(
title = "Scatterplot: Life Expectancy and GDP",
x = "GDP Per Capita",
y = "Life Expectancy"
) +
theme_minimal()
plot_model
plot_residuals
# histogram check for normal distribution no skew
plot_residuals_norm <- df_clean %>%
ggplot(aes(x = .resid)) +
geom_histogram(bins = 20, fill = "skyblue", color = "white") +
labs(title = "Histogram of Residuals", x = "Residuals") +
theme_minimal()
plot_residuals_norm
# histogram check for normal distribution no skew
plot_residuals_norm <- resid_df %>%
ggplot(aes(x = .resid)) +
geom_histogram(bins = 20, fill = "skyblue", color = "white") +
labs(title = "Histogram of Residuals", x = "Residuals") +
theme_minimal()
plot_residuals_norm
plot_qq <- resid_df %>%
ggplot(aes(sample = .resid)) +
stat_qq() +
stat_qq_line(color = "red") +
labs(title = "QQ Plot of Residuals") +
theme_minimal()
plot_qq
resid_df <- resid_df %>%
mutate(.std_resid = rstandard(lm_gdp))
plot_heteroscedasticity <- resid_df %>%
ggplot(resid_df, aes(x = .fitted, y = sqrt(abs(.std_resid)))) +
geom_point(alpha = 0.6) +
geom_smooth(se = FALSE, color = "red") +
labs(title = "Scale-Location Plot", x = "Fitted Values", y = "√|Standardized Residuals|") +
theme_minimal()
plot_heteroscedasticity <- resid_df %>%
ggplot(aes(x = .fitted, y = sqrt(abs(.std_resid)))) +
geom_point(alpha = 0.6) +
geom_smooth(se = FALSE, color = "red") +
labs(title = "Scale-Location Plot", x = "Fitted Values", y = "√|Standardized Residuals|") +
theme_minimal()
plot_heteroscedasticity
# load data
df_raw <- read_csv("https://raw.githubusercontent.com/AmandaSFox/DATA605_Math/refs/heads/main/gapminder_data_graphs.csv")
glimpse(df_raw)
# find unique years sorted
df_raw %>%
count(year, sort=TRUE) %>%
print(n=25)
# visual summary of all cols from summarytools pkg
dfSummary(df_raw)
# duplicate records
nrow(df_raw) - nrow(distinct(df_raw))
# missing data (2018 only)
df_raw %>%
filter(year == 2018) %>%
summarise(across(everything(), ~sum(is.na(.))))
df_clean <- df_raw %>%
filter(year == 2018) %>%
filter(!is.na(gdp)) #remove blank
glimpse(df_clean)
# Loading the dataset
data(mtcars)
head(mtcars)
# Fitting a regression model
model <- lm(mpg ~ wt + hp + cyl, data = mtcars)
# Getting a summary of the model
summary(model)
# Plotting the residuals
plot(model$fitted.values, resid(model),
main = "Residuals vs Fitted",
xlab = "Fitted values",
ylab = "Residuals")
abline(h = 0, col = "red")
hist(resid(model), breaks = 10,
main = "Histogram of Residuals",
xlab = "Residuals")
qqnorm(resid(model))
qqline(resid(model), col = "red")
plot(model$fitted.values, abs(resid(model)),
main = "Absolute Residuals vs Fitted Values",
xlab = "Fitted values",
ylab = "|Residuals|")
